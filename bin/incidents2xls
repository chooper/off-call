#!/usr/bin/env ruby
# coding: utf-8

require "./lib/off-call"
require 'axlsx'

ENV.source ".env"

OffCall::PagerDuty.connect(
  ENV["PAGERDUTY_SUBDOMAIN"],
  ENV["PAGERDUTY_USER"],
  ENV["PAGERDUTY_PASSWORD"])

services = ENV["SERVICES"].split(",") || abort(
  "Must provide SERVICES=PXXXXXX,PYYYYYY")
since = ENV["SINCE"].to_time rescue "Last Week".to_time
until_ = ENV["UNTIL"].to_time rescue "Now".to_time

params = {
  :since => since.iso8601,
  :until => until_.iso8601,
  :service => services.join(",")
}

Axlsx::Package.new do |p|
  workbook = p.workbook
  sheet = workbook.add_worksheet :name => Time.now.strftime('%Y-%m-%d')
  
  header_style = workbook.styles.add_style(
    :sz => 10, :b => true, :alignment => { :horizontal => :center,
                                             :vertical => :bottom } )
  normal_style = workbook.styles.add_style(
    :sz => 10, :alignment => { :horizontal => :left,
                               :vertical => :top, :wrapText => true} )

  date_style = workbook.styles.add_style :sz => 10,
    :sz => 10, :num_fmt => Axlsx::NUM_FMT_YYYYMMDDHHMMSS,
    :alignment => { :horizontal => :left, :vertical => :top,
                    :wrapText => true }
  sheet.add_row [
    "Service", "Id", "Date", "Resolved By", "Summary",
    "Root Cause", "Remediation", "Trello Card"], :style => header_style

  incidents = OffCall::PagerDuty.incidents(params)
  puts "Found #{incidents.length} matching incidents."
  incidents.each do |i|
    row = [
           i["service"]["name"],
           %(=HYPERLINK("#{i["html_url"]}","#{i["id"]}")),
           Time.parse(i["created_on"]),
          ]

    if i["last_status_change_by"]
      row << i["last_status_change_by"]["name"]
    else
      row << ""
    end

    if i["trigger_summary_data"]
      if i["trigger_summary_data"]["description"]
        row << i["trigger_summary_data"]["description"]
      else
        row << i["trigger_summary_data"]["subject"]
      end
    else
      row << i["incident_key"]
    end

    sheet.add_row row + [""] * 3,
      :style => [normal_style] * 2 + [date_style] + [normal_style] * 5
  end

  widths = [4.times.map { 9 }, 35, 22, 22, 10].flatten
  sheet.column_widths *widths

  # Freeze the header row
  sheet.sheet_view.pane do |pane|
    pane.top_left_cell = "B1"
    pane.state = :frozen
    pane.y_split = 1
    pane.active_pane = :bottom_right
  end

  # Numbers interop
  p.use_shared_strings = true
  p.serialize("incidents.xls")
end
